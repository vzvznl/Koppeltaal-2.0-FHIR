name: Build (and Deploy) FHIR packages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main", "autobuild"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  id-token: write
  contents: write
  packages: write
  pages: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "publish"
  cancel-in-progress: false


jobs:
  build:
    permissions: write-all
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      - name: Build and push to local registry
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: localhost:5000/gidsopenstandaarden/fhir-builder:latest
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        env:
          FHIR_EMAIL: ${{ secrets.FHIR_EMAIL }}
          FHIR_PASSWORD: ${{ secrets.FHIR_PASSWORD }}
        run: |
          mkdir -p ./output
          docker run -v ${PWD}:/src -e FHIR_EMAIL=${FHIR_EMAIL} -e FHIR_PASSWORD=${FHIR_PASSWORD} localhost:5000/gidsopenstandaarden/fhir-builder:latest
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: './output'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: version
        id: version
        run: |
          VERSION=$(cat package.json | jq -r .version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
      - name: Publish to GitHub Packages
        run: |
          # Extract the package to publish it
          mkdir -p npm-publish
          tar -xzf ./koppeltaalv2.00.${{ steps.version.outputs.version }}.tgz -C npm-publish
          cd npm-publish/package
          
          # Get the repository owner (org or user)
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          
          # Calculate the publish version
          PUBLISH_VERSION="${{ steps.version.outputs.version }}"
          # For non-main branches, append the short commit hash to make version unique
          if [ "${{ github.ref_name }}" != "main" ]; then
            PUBLISH_VERSION="${PUBLISH_VERSION}-${GITHUB_SHA::7}"
          fi
          
          # Update package.json to include GitHub registry info and ensure it's scoped
          # Also update the version to match what we calculated
          jq --arg owner "@$REPO_OWNER" --arg version "$PUBLISH_VERSION" '.name = $owner + "/" + .name | .version = $version | .publishConfig = {"registry": "https://npm.pkg.github.com", "access": "restricted"}' package.json > package.json.tmp && mv package.json.tmp package.json
          
          # Publish the package as private (restricted access)
          npm publish --access restricted
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        if: always()
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: false
          name: ${{ steps.version.outputs.version }}
          tag_name: v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          files: |
            ./koppeltaalv2.00.${{ steps.version.outputs.version }}.tgz
        env:
          GITHUB_TOKEN: ${{ github.token }}

